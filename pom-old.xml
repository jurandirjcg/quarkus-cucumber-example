<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<groupId>com.myh3alth</groupId>
	<artifactId>paciente-service</artifactId>
	<name>Paciente Service</name>
	<version>1.0.0-RC2</version>
	<packaging>war</packaging>

	<properties>
		<maven.compiler.source>1.8</maven.compiler.source>
		<maven.compiler.target>1.8</maven.compiler.target>
		<failOnMissingWebXml>false</failOnMissingWebXml>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<skipTests>true</skipTests>
		<skipThorntailPlugin>false</skipThorntailPlugin>
		<!-- LIBS -->
		<version.canary>1.0.0</version.canary>
		<version.copy-rename-maven-plugin>1.0.1</version.copy-rename-maven-plugin>
		<version.cucumber-java>4.7.4</version.cucumber-java>
		<version.commons-collections>3.2.2</version.commons-collections>
		<version.dockerfile-maven-plugin>1.4.13</version.dockerfile-maven-plugin>
		<version.junit>4.12</version.junit>
		<version.maven-compiler-plugin>3.8.1</version.maven-compiler-plugin>
		<version.maven-failsafe-plugin>2.18.1</version.maven-failsafe-plugin>
		<version.maven-resources-plugin>3.1.0</version.maven-resources-plugin>
		<version.maven-surefire-plugin>2.8</version.maven-surefire-plugin>
		<version.maven-surefire-report-plugin>3.0.0-M3</version.maven-surefire-report-plugin>
		<version.maven-war-plugin>2.4</version.maven-war-plugin>
		<version.org.jacoco.core>0.8.3</version.org.jacoco.core>
		<version.postgresql>9.4.1212</version.postgresql>
		<version.io.quarkus>0.26.1</version.io.quarkus>
		<version.replacer>1.5.2</version.replacer>
		<version.reporting-plugin>3.0.8</version.reporting-plugin>
		<version.rest-assured>4.1.2</version.rest-assured>
		<version.sonar-maven-plugin>3.2</version.sonar-maven-plugin>
		<version.hibernate-jpamodelgen>5.3.7.Final</version.hibernate-jpamodelgen>
		<version.weld-se>2.4.8.Final</version.weld-se>
	</properties>

	<dependencyManagement>
		<dependencies>
			<dependency>
				<groupId>io.quarkus</groupId>
				<artifactId>quarkus-bom</artifactId>
				<version>${version.io.quarkus}</version>
				<scope>import</scope>
				<type>pom</type>
			</dependency>
		</dependencies>
	</dependencyManagement>

	<dependencies>
	
        <!-- Microprofile Health -->
        <dependency>
	      <groupId>io.quarkus</groupId>
	      <artifactId>quarkus-smallrye-health</artifactId>
	    </dependency>
	    <!-- Microprofile Metrics -->
	    <dependency>
            <groupId>io.quarkus</groupId>
            <artifactId>quarkus-smallrye-metrics</artifactId>
        </dependency>
	    <!-- Microprofile Fault Tolerance -->
	    <dependency>
            <groupId>io.quarkus</groupId>
            <artifactId>quarkus-smallrye-fault-tolerance</artifactId>
        </dependency>
        <!-- Microprofile Openapi -->
        <dependency>
            <groupId>io.quarkus</groupId>
            <artifactId>quarkus-smallrye-openapi</artifactId>
        </dependency>
        <!-- Bean Validator -->
        <dependency>
	      <groupId>io.quarkus</groupId>
	      <artifactId>quarkus-hibernate-validator</artifactId>
	    </dependency>
	    <!-- JPA / JTA -->
		<dependency>
	        <groupId>io.quarkus</groupId>
	        <artifactId>quarkus-hibernate-orm</artifactId>
	    </dependency>
	    <!-- JDBC driver dependencies -->
	    <dependency>
	        <groupId>io.quarkus</groupId>
	        <artifactId>quarkus-jdbc-postgresql</artifactId>
	    </dependency>
	    <!-- JAX-RS -->
	    <dependency>
            <groupId>io.quarkus</groupId>
            <artifactId>quarkus-resteasy</artifactId>
        </dependency>
        <!-- Infinispan -->
        <dependency>
            <groupId>io.quarkus</groupId>
            <artifactId>quarkus-infinispan-client</artifactId>
        </dependency>
        <dependency>
            <groupId>org.infinispan</groupId>
            <artifactId>infinispan-query-dsl</artifactId>
        </dependency>
        <!-- CDI -->
        <dependency>
        	<groupId>io.quarkus</groupId>
        	<artifactId>quarkus-arc</artifactId>
        </dependency>
        <!-- Resteasy jackson -->
        <dependency>
        	<groupId>io.quarkus</groupId>
        	<artifactId>quarkus-resteasy-jackson</artifactId>
        </dependency>
		<!-- Canary -->
		<dependency>
			<groupId>br.com.jgon</groupId>
			<artifactId>canary</artifactId>
			<version>${version.canary}</version>
		</dependency>
		<!-- Outras dependencias -->
		<dependency>
			<groupId>commons-collections</groupId>
			<artifactId>commons-collections</artifactId>
			<version>${version.commons-collections}</version>
		</dependency>
		<!-- JPA Modelgen -->
		<dependency>
			<groupId>org.hibernate</groupId>
			<artifactId>hibernate-jpamodelgen</artifactId>
			<version>${version.hibernate-jpamodelgen}</version>
			<exclusions>
				<exclusion>
					<groupId>org.jboss.logging</groupId>
					<artifactId>jboss-logging</artifactId>
				</exclusion>
			</exclusions>
		</dependency>
		<!-- DEPENDENCIAS DE TESTE -->
		<dependency>
            <groupId>io.quarkus</groupId>
            <artifactId>quarkus-junit5</artifactId>
            <scope>test</scope>
        </dependency>
		<dependency>
			<groupId>io.cucumber</groupId>
			<artifactId>cucumber-java8</artifactId>
			<version>${version.cucumber-java}</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>io.cucumber</groupId>
			<artifactId>cucumber-junit</artifactId>
			<version>${version.cucumber-java}</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>io.rest-assured</groupId>
			<artifactId>rest-assured</artifactId>
			<scope>test</scope>
		</dependency>
	</dependencies>
	<build>
		<finalName>paciente-service</finalName>
		<!-- Filtrar resources -->
		<resources>
			<resource>
				<directory>src/main/resources</directory>
				<filtering>true</filtering>
			</resource>
		</resources>
		<plugins>
			<!-- Thorntail -->
			<plugin>
				<groupId>io.quarkus</groupId>
				<artifactId>quarkus-maven-plugin</artifactId>
				<version>${version.io.quarkus}</version>
				<executions>
					<execution>
						<id>build</id>
						<goals>
							<goal>build</goal>
						</goals>
					</execution>
				</executions>
				<configuration>
					<skip>${skipThorntailPlugin}</skip>
					<!-- <hollow>true</hollow> -->
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.sonarsource.scanner.maven</groupId>
				<artifactId>sonar-maven-plugin</artifactId>
				<version>${version.sonar-maven-plugin}</version>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>${version.maven-compiler-plugin}</version>
				<configuration>
					<encoding>UTF-8</encoding>
					<source>1.8</source>
					<target>1.8</target>
					<compilerArguments>
						<processor>org.hibernate.jpamodelgen.JPAMetaModelEntityProcessor</processor>
					</compilerArguments>
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-resources-plugin</artifactId>
				<version>${version.maven-resources-plugin}</version>
				<configuration>
					<encoding>UTF-8</encoding>
				</configuration>
				<executions>
					<execution>
						<id>copy-resources</id>
						<phase>process-resources</phase>
						<goals>
							<goal>copy-resources</goal>
						</goals>
						<configuration>
							<outputDirectory>target/classes</outputDirectory>
							<resources>
								<resource>
									<directory>src/main/resources</directory>
									<filtering>true</filtering>
								</resource>
							</resources>
							<nonFilteredFileExtensions>
								<nonFilteredFileExtension>jasper</nonFilteredFileExtension>
								<nonFilteredFileExtension>ttf</nonFilteredFileExtension>
							</nonFilteredFileExtensions>
						</configuration>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<groupId>com.coderplus.maven.plugins</groupId>
				<artifactId>copy-rename-maven-plugin</artifactId>
				<version>${version.copy-rename-maven-plugin}</version>
				<executions>
					<execution>
						<id>copy-file</id>
						<phase>compile</phase>
						<!-- <phase>validate</phase> -->
						<goals>
							<goal>copy</goal>
						</goals>
						<configuration>
							<fileSets>
								<!-- <fileSet> -->
								<!-- <sourceFile>src/main/config/${profile-id}/${profile-id}.properties</sourceFile> -->
								<!-- <destinationFile>target/classes/environment.properties</destinationFile> -->
								<!-- </fileSet> -->
							</fileSets>
						</configuration>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-war-plugin</artifactId>
				<version>${version.maven-war-plugin}</version>
				<configuration>
					<webResources>
						<resource>
							<filtering>true</filtering>
							<directory>src/main/webapp</directory>
							<includes>
								<!-- <include>**/seg.html</include> -->
								<!-- <include>**/web.xml</include> -->
								<include>**/index.html</include>
							</includes>
						</resource>
						<!-- <resource> <filtering>true</filtering> <directory>src/main/emgpr-view/dist</directory> 
							<includes> <include>**/*.*</include> </includes> </resource> -->
					</webResources>
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-surefire-plugin</artifactId>
				<version>${version.maven-surefire-plugin}</version>
				<configuration>
					<skipTests>${skipTests}</skipTests>
                    <systemProperties>
                        <java.util.logging.manager>org.jboss.logmanager.LogManager</java.util.logging.manager>
                    </systemProperties>
				</configuration>
			</plugin>
			<plugin>
				<groupId>com.google.code.maven-replacer-plugin</groupId>
				<artifactId>replacer</artifactId>
				<version>${version.replacer}</version>
				<executions>
					<execution>
						<id>replace-cucumber-files</id>
						<!-- <phase>process-test-resources</phase> -->
						<phase>prepare-package</phase>
						<goals>
							<goal>replace</goal>
						</goals>
					</execution>
				</executions>
				<configuration>
					<includes>
						<include>docs/ucs/**/*.md</include>
					</includes>
					<!-- <excludes> -->
					<!-- <exclude>docs/casos_de_uso/**/UCS01*</exclude> -->
					<!-- </excludes> -->
					<inputFilePattern>.md</inputFilePattern>
					<outputFilePattern>.feature</outputFilePattern>
					<preserveDir>false</preserveDir>
					<outputDir>target/features</outputDir>
					<replacements>
						<replacement>
							<token><![CDATA[[\w\W]*<!BDD.INICIO>]]></token>
							<value>#language: pt</value>
						</replacement>
						<replacement>
							<token><![CDATA[<!BDD.FIM>[\w\W]*]]></token>
							<value></value>
						</replacement>
						<replacement>
							<token>#+\sTAG(\s*|(\n)*)</token>
							<value></value>
						</replacement>
						<replacement>
							<token>#+\sFuncionalidade\s?:</token>
							<value>Funcionalidade:</value>
						</replacement>
						<replacement>
							<token>#+\sRegras de Neg(o|ó)cio\s?:</token>
							<value>Regras de Negocio:</value>
						</replacement>
						<replacement>
							<token>#+\sContexto\s?:</token>
							<value>Contexto:</value>
						</replacement>
						<replacement>
							<token>#+\s*Esquema\sdo\sCen(a|á)rio\s?:</token>
							<value>Esquema do Cenário:</value>
						</replacement>
						<replacement>
							<token>#+\sCen(a|á)rio\s?:</token>
							<value>Cenário:</value>
						</replacement>
						<replacement>
							<token>`</token>
							<value></value>
						</replacement>
						<replacement>
							<token>\*\*</token>
							<value></value>
						</replacement>
						<replacement>
							<token>\ \(\[?[\w\d\,\- \[\]\(\)\#áàâãéèêíïóôõöúçñ]+\){1,2}\ *</token>
							<value></value>
						</replacement>
						<replacement>
							<token>\|\s?\-+[ \-\|\t]+\|\s*\n</token>
							<value></value>
						</replacement>
					</replacements>
					<regexFlags>
						<regexFlag>CASE_INSENSITIVE</regexFlag>
						<regexFlag>MULTILINE</regexFlag>
					</regexFlags>
				</configuration>
			</plugin>
		</plugins>
		<testResources>
			<testResource>
				<directory>src/test/resources</directory>
				<filtering>true</filtering>
			</testResource>
		</testResources>
	</build>
	<profiles>
		<profile>
			<id>check-project</id>
			<properties>
				<skipTests>false</skipTests>
			</properties>
			<dependencies>
				<dependency>
					<groupId>org.jacoco</groupId>
					<artifactId>org.jacoco.core</artifactId>
					<version>${version.org.jacoco.core}</version>
					<scope>test</scope>
				</dependency>
				<dependency>
				  <groupId>de.monochromata.cucumber</groupId>
				  <artifactId>reporting-plugin</artifactId>
				  <version>${version.reporting-plugin}</version>
				</dependency>
			</dependencies>
			<build>
				<plugins>
					<plugin>
						<groupId>io.quarkus</groupId>
						<artifactId>quarkus-maven-plugin</artifactId>
						<version>${version.io.quarkus}</version>
						<executions>
							<execution>
								<configuration>
									<jvmArguments>
										<jvmArgument>${jacoco.agent}</jvmArgument>
									</jvmArguments>
								</configuration>
								<id>start</id>
								<phase>pre-integration-test</phase>
								<goals>
									<goal>stop</goal>
									<goal>start</goal>
								</goals>
							</execution>
							<execution>
								<id>stop</id>
								<phase>post-integration-test</phase>
								<goals>
									<goal>stop</goal>
								</goals>
							</execution>
						</executions>
					</plugin>
					<plugin>
						<groupId>org.jacoco</groupId>
						<artifactId>jacoco-maven-plugin</artifactId>
						<version>${version.org.jacoco.core}</version>
						<executions>
							<execution>
								<id>pre-integration-test</id>
            					<phase>validate</phase>
								<goals>
									<goal>prepare-agent-integration</goal>
								</goals>
								<configuration>
									<destFile>${project.build.directory}/coverage-reports/jacoco-it.exec</destFile>
 									<propertyName>jacoco.agent</propertyName>
								</configuration>
							</execution>
							<execution>
								<id>report</id>
								<phase>verify</phase>
								<goals>
									<goal>report-integration</goal>
								</goals>
								<configuration>
									<dataFile>${project.build.directory}/coverage-reports/jacoco-it.exec</dataFile>
					                <!-- Sets the output directory for the code coverage report. -->
                					<outputDirectory>${project.reporting.outputDirectory}/jacoco-it</outputDirectory>
								</configuration>
							</execution>
							<execution>
								<id>jacoco-check</id>
								<goals>
									<goal>check</goal>
								</goals>
								<configuration>
									<rules>
										<rule>
											<element>PACKAGE</element>
											<limits>
												<limit>
													<counter>LINE</counter>
													<value>COVEREDRATIO</value>
													<minimum>0.9</minimum>
												</limit>
											</limits>
										</rule>
									</rules>
								</configuration>
							</execution>
						</executions>
					</plugin>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-failsafe-plugin</artifactId>
						<version>${version.maven-failsafe-plugin}</version>
						<executions>
							<execution>
								<goals>
									<goal>integration-test</goal>
									<goal>verify</goal>
								</goals>
								<configuration>
									<skipTests>false</skipTests>
								</configuration>
							</execution>
						</executions>
					</plugin>
					<plugin>
				        <groupId>org.apache.maven.plugins</groupId>
				        <artifactId>maven-surefire-report-plugin</artifactId>
				        <version>${version.maven-surefire-report-plugin}</version>
				        <executions>
				        	<execution>
				        		<id>reports</id>
				        		<phase>verify</phase>
				        		<goals>
				        			<goal>failsafe-report-only</goal>
 				        			<goal>report-only</goal>
				        		</goals>
				        	</execution>
				        </executions>
      				</plugin>
				</plugins>
			</build>
		</profile>
		<profile>
			<id>check-features</id>
			<properties>
				<skipThorntailPlugin>true</skipThorntailPlugin>
			</properties>
			<build>
				<plugins>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-failsafe-plugin</artifactId>
						<version>${version.maven-failsafe-plugin}</version>
						<executions>
							<execution>
								<goals>
									<goal>integration-test</goal>
								</goals>
								<configuration>
									<test>RunCucumberCheckFeatures</test>
									<skipTests>false</skipTests>
								</configuration>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>
		<profile>
			<id>docker-image</id>
			<build>
				<plugins>
					<plugin>
						<groupId>com.spotify</groupId>
						<artifactId>dockerfile-maven-plugin</artifactId>
						<version>${version.dockerfile-maven-plugin}</version>
						<executions>
							<execution>
								<id>default</id>
								<goals>
									<goal>build</goal>
								</goals>
							</execution>
						</executions>
						<configuration>
							<repository>paciente-service</repository>
							<tag>${project.version}</tag>
							<buildArgs>
								<JAR_FILE>${project.build.finalName}-thorntail.jar</JAR_FILE>
							</buildArgs>
						</configuration>
					</plugin>
				</plugins>
			</build>
		</profile>
	</profiles>
</project>
