<?xml version="1.0"?>
<project
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"
	xmlns="http://maven.apache.org/POM/4.0.0"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
	<modelVersion>4.0.0</modelVersion>
	<groupId>com.myh3alth</groupId>
	<artifactId>paciente-service</artifactId>
	<name>Paciente Service</name>
	<version>1.0.0-RC3</version>
	<properties>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
		<maven.compiler.parameters>true</maven.compiler.parameters>
		<maven.compiler.target>1.8</maven.compiler.target>
		<skipReports>false</skipReports>
		<test-postgresql-user>qa_user</test-postgresql-user>
		<test-postgresql-passwd>qa_pass</test-postgresql-passwd>
		<test-postgresql-port>5433</test-postgresql-port>
		<test-postgresql-db>qadb</test-postgresql-db>
		<!-- dependencies -->
		<canary.version>2.0-RC1-SNAPSHOT</canary.version>
		<cucumber-java.version>4.7.4</cucumber-java.version>
		<hibernate-jpamodelgen.version>5.3.7.Final</hibernate-jpamodelgen.version>
		<quarkus.version>1.0.0.CR1</quarkus.version>
		<!-- plugins -->
		<compiler-plugin.version>3.8.1</compiler-plugin.version>
		<docker-maven-plugin.version>0.31.0</docker-maven-plugin.version>
		<embedded-postgresql-maven-plugin.version>1.2.2</embedded-postgresql-maven-plugin.version>
		<jacoco.version>0.8.4</jacoco.version>
		<maven.compiler.source>1.8</maven.compiler.source>
		<maven-cucumber-reporting.version>4.11.0</maven-cucumber-reporting.version>
		<maven-failsafe-plugin.version>2.18.1</maven-failsafe-plugin.version>
		<maven-surefire-report-plugin.version>3.0.0-M3</maven-surefire-report-plugin.version>
		<org.jacoco.core.version>0.8.3</org.jacoco.core.version>
		<replacer.version>1.5.2</replacer.version>
		<sonar-maven-plugin.version>3.2</sonar-maven-plugin.version>
		<surefire-plugin.version>2.22.0</surefire-plugin.version>
	</properties>
	<dependencyManagement>
		<dependencies>
			<dependency>
				<groupId>io.quarkus</groupId>
				<artifactId>quarkus-bom</artifactId>
				<version>${quarkus.version}</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>
		</dependencies>
	</dependencyManagement>
	<dependencies>
		<dependency>
			<groupId>io.quarkus</groupId>
			<artifactId>quarkus-resteasy</artifactId>
		</dependency>
		<dependency>
			<groupId>io.quarkus</groupId>
			<artifactId>quarkus-hibernate-orm</artifactId>
		</dependency>
		<dependency>
			<groupId>io.quarkus</groupId>
			<artifactId>quarkus-infinispan-client</artifactId>
		</dependency>
		<dependency>
			<groupId>io.quarkus</groupId>
			<artifactId>quarkus-hibernate-validator</artifactId>
		</dependency>
		<dependency>
			<groupId>io.quarkus</groupId>
			<artifactId>quarkus-smallrye-openapi</artifactId>
			<!-- <exclusions> -->
			<!-- <exclusion> -->
			<!-- <groupId>io.quarkus</groupId> -->
			<!-- <artifactId>quarkus-swagger-ui</artifactId> -->
			<!-- </exclusion> -->
			<!-- </exclusions> -->
		</dependency>
		<dependency>
			<groupId>io.quarkus</groupId>
			<artifactId>quarkus-smallrye-fault-tolerance</artifactId>
		</dependency>
		<dependency>
			<groupId>io.quarkus</groupId>
			<artifactId>quarkus-smallrye-health</artifactId>
		</dependency>
		<dependency>
			<groupId>io.quarkus</groupId>
			<artifactId>quarkus-smallrye-metrics</artifactId>
		</dependency>
		<dependency>
			<groupId>io.quarkus</groupId>
			<artifactId>quarkus-arc</artifactId>
		</dependency>
		<dependency>
			<groupId>io.quarkus</groupId>
			<artifactId>quarkus-resteasy-jsonb</artifactId>
		</dependency>
		<dependency>
			<groupId>io.quarkus</groupId>
			<artifactId>quarkus-jaxb</artifactId>
		</dependency>
		<dependency>
			<groupId>io.quarkus</groupId>
			<artifactId>quarkus-flyway</artifactId>
		</dependency>
		<dependency>
			<groupId>io.quarkus</groupId>
			<artifactId>quarkus-jdbc-postgresql</artifactId>
		</dependency>
		<dependency>
			<groupId>br.com.jgon</groupId>
			<artifactId>canary</artifactId>
			<version>${canary.version}</version>
		</dependency>
		<dependency>
			<groupId>org.hibernate</groupId>
			<artifactId>hibernate-jpamodelgen</artifactId>
			<version>${hibernate-jpamodelgen.version}</version>
		</dependency>
		<!-- Test Dependecies -->
		<dependency>
			<groupId>io.quarkus</groupId>
			<artifactId>quarkus-junit5</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>io.rest-assured</groupId>
			<artifactId>rest-assured</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>io.cucumber</groupId>
			<artifactId>cucumber-java8</artifactId>
			<version>${cucumber-java.version}</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>io.cucumber</groupId>
			<artifactId>cucumber-junit</artifactId>
			<version>${cucumber-java.version}</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.jacoco</groupId>
			<artifactId>org.jacoco.agent</artifactId>
			<classifier>runtime</classifier>
			<scope>test</scope>
			<version>${jacoco.version}</version>
		</dependency>
	</dependencies>
	<build>
		<finalName>paciente-service</finalName>
		<!-- Filtrar resources -->
		<resources>
			<resource>
				<directory>src/main/resources</directory>
				<filtering>true</filtering>
			</resource>
		</resources>
		<plugins>
			<plugin>
				<groupId>io.quarkus</groupId>
				<artifactId>quarkus-maven-plugin</artifactId>
				<version>${quarkus.version}</version>
				<executions>
					<execution>
						<goals>
							<goal>build</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>${compiler-plugin.version}</version>
				<configuration>
					<compilerArguments>
						<processor>org.hibernate.jpamodelgen.JPAMetaModelEntityProcessor</processor>
					</compilerArguments>
				</configuration>
			</plugin>
			<plugin>
				<artifactId>maven-surefire-plugin</artifactId>
				<version>${surefire-plugin.version}</version>
				<configuration>
					<systemProperties>
						<java.util.logging.manager>org.jboss.logmanager.LogManager</java.util.logging.manager>
					</systemProperties>
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-checkstyle-plugin</artifactId>
				<version>3.1.0</version>
				<dependencies>
					<dependency>
						<groupId>com.puppycrawl.tools</groupId>
						<artifactId>checkstyle</artifactId>
						<version>8.26</version>
					</dependency>
				</dependencies>
				<executions>
					<execution>
						<id>verify-style</id>
						<phase>process-classes</phase>
						<goals>
							<goal>check</goal>
						</goals>
					</execution>
				</executions>
				<configuration>
					<skip>${skipCheck}</skip>
					<configLocation>checkstyle.xml</configLocation>
					<suppressionsLocation>checkstyle-suppressions.xml</suppressionsLocation>
				</configuration>
			</plugin>
			<plugin>
				<!-- CONFIGURAR O PLUGIN DO SONAR -->
				<groupId>org.sonarsource.scanner.maven</groupId>
				<artifactId>sonar-maven-plugin</artifactId>
				<version>${sonar-maven-plugin.version}</version>
			</plugin>
			<plugin>
				<groupId>com.google.code.maven-replacer-plugin</groupId>
				<artifactId>replacer</artifactId>
				<version>${replacer.version}</version>
				<executions>
					<execution>
						<id>replace-cucumber-files</id>
						<!-- <phase>process-test-resources</phase> -->
						<phase>prepare-package</phase>
						<goals>
							<goal>replace</goal>
						</goals>
					</execution>
				</executions>
				<configuration>
					<includes>
						<include>docs/ucs/**/*.md</include>
					</includes>
					<!-- <excludes> -->
					<!-- <exclude>docs/casos_de_uso/**/UCS01*</exclude> -->
					<!-- </excludes> -->
					<inputFilePattern>.md</inputFilePattern>
					<outputFilePattern>.feature</outputFilePattern>
					<preserveDir>false</preserveDir>
					<outputDir>target/features</outputDir>
					<replacements>
						<replacement>
							<token><![CDATA[[\w\W]*<!BDD.INICIO>]]></token>
							<value>#language: pt</value>
						</replacement>
						<replacement>
							<token><![CDATA[<!BDD.FIM>[\w\W]*]]></token>
							<value></value>
						</replacement>
						<replacement>
							<token>#+\sTAG(\s*|(\n)*)</token>
							<value></value>
						</replacement>
						<replacement>
							<token>#+\sFuncionalidade\s?:</token>
							<value>Funcionalidade:</value>
						</replacement>
						<replacement>
							<token>#+\sRegras de Neg(o|ó)cio\s?:</token>
							<value>Regras de Negocio:</value>
						</replacement>
						<replacement>
							<token>#+\sContexto\s?:</token>
							<value>Contexto:</value>
						</replacement>
						<replacement>
							<token>#+\s*Esquema\sdo\sCen(a|á)rio\s?:</token>
							<value>Esquema do Cenário:</value>
						</replacement>
						<replacement>
							<token>#+\sCen(a|á)rio\s?:</token>
							<value>Cenário:</value>
						</replacement>
						<replacement>
							<token>`</token>
							<value></value>
						</replacement>
						<replacement>
							<token>\*\*</token>
							<value></value>
						</replacement>
						<replacement>
							<token>\ \(\[?[\w\d\,\- \[\]\(\)\#áàâãéèêíïóôõöúçñ]+\){1,2}\ *</token>
							<value></value>
						</replacement>
						<replacement>
							<token>\|\s?\-+[ \-\|\t]+\|\s*\n</token>
							<value></value>
						</replacement>
					</replacements>
					<regexFlags>
						<regexFlag>CASE_INSENSITIVE</regexFlag>
						<regexFlag>MULTILINE</regexFlag>
					</regexFlags>
				</configuration>
			</plugin>
			<!-- Test Plugins -->
			<plugin>
				<groupId>net.masterthought</groupId>
				<artifactId>maven-cucumber-reporting</artifactId>
				<version>${maven-cucumber-reporting.version}</version>
				<executions>
					<execution>
						<id>execution</id>
						<phase>verify</phase>
						<goals>
							<goal>generate</goal>
						</goals>
						<configuration>
							<projectName>PacienteService</projectName>
							<skip>${skipReports}</skip>
							<outputDirectory>${project.reporting.outputDirectory}/cucumber-report-html</outputDirectory>
							<inputDirectory>${project.build.directory}</inputDirectory>
							<jsonFiles>
								<param>**/*.json</param>
							</jsonFiles>
						</configuration>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-failsafe-plugin</artifactId>
				<version>${maven-failsafe-plugin.version}</version>
				<executions>
					<execution>
						<goals>
							<goal>integration-test</goal>
							<goal>verify</goal>
						</goals>
						<configuration>
							<systemProperties>
								<jacoco-agent.destfile>${project.build.directory}/jacoco-it.exec</jacoco-agent.destfile>
							</systemProperties>
						</configuration>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<groupId>org.jacoco</groupId>
				<artifactId>jacoco-maven-plugin</artifactId>
				<version>${jacoco.version}</version>
				<executions>
					<execution>
						<id>instrument-ut</id>
						<goals>
							<goal>instrument</goal>
						</goals>
					</execution>
					<execution>
						<id>restore-ut</id>
						<goals>
							<goal>restore-instrumented-classes</goal>
						</goals>
					</execution>
					<execution>
						<id>report-ut</id>
						<goals>
							<goal>report</goal>
						</goals>
						<configuration>
							<dataFile>${project.build.directory}/jacoco-ut.exec</dataFile>
							<outputDirectory>${project.reporting.outputDirectory}/jacoco-ut</outputDirectory>
						</configuration>
					</execution>
					<execution>
						<id>instrument-it</id>
						<phase>pre-integration-test</phase>
						<goals>
							<goal>instrument</goal>
						</goals>
					</execution>
					<execution>
						<id>restore-it</id>
						<phase>post-integration-test</phase>
						<goals>
							<goal>restore-instrumented-classes</goal>
						</goals>
					</execution>
					<execution>
						<id>report-it</id>
						<phase>post-integration-test</phase>
						<goals>
							<goal>report</goal>
						</goals>
						<configuration>
							<dataFile>${project.build.directory}/jacoco-it.exec</dataFile>
							<outputDirectory>${project.reporting.outputDirectory}/jacoco-it</outputDirectory>
						</configuration>
					</execution>
					<execution>
						<id>merge-results</id>
						<phase>verify</phase>
						<goals>
							<goal>merge</goal>
						</goals>
						<configuration>
							<fileSets>
								<fileSet>
									<directory>${project.build.directory}</directory>
									<includes>
										<include>*.exec</include>
									</includes>
								</fileSet>
							</fileSets>
							<destFile>${project.build.directory}/jacoco.exec</destFile>
						</configuration>
					</execution>
					<execution>
						<id>post-merge-report</id>
						<phase>verify</phase>
						<goals>
							<goal>report</goal>
						</goals>
						<configuration>
							<dataFile>${project.build.directory}/jacoco.exec</dataFile>
							<outputDirectory>${project.reporting.outputDirectory}/jacoco</outputDirectory>
						</configuration>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-surefire-report-plugin</artifactId>
				<version>${maven-surefire-report-plugin.version}</version>
				<configuration>
				    <skipFailsafeReport>${skipReports}</skipFailsafeReport>
				    <skipSurefireReport>${skipReports}</skipSurefireReport>
				</configuration>
				<executions>
					<execution>
						<id>reports</id>
						<phase>verify</phase>
						<goals>
							<goal>failsafe-report-only</goal>
							<goal>report-only</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
		</plugins>
		<testResources>
			<testResource>
				<directory>src/test/resources</directory>
				<filtering>true</filtering>
			</testResource>
		</testResources>
		<pluginManagement>
			<plugins>
				<!--This plugin's configuration is used to store Eclipse m2e settings 
					only. It has no influence on the Maven build itself. -->
				<plugin>
					<groupId>org.eclipse.m2e</groupId>
					<artifactId>lifecycle-mapping</artifactId>
					<version>1.0.0</version>
					<configuration>
						<lifecycleMappingMetadata>
							<pluginExecutions>
								<pluginExecution>
									<pluginExecutionFilter>
										<groupId>
											org.apache.maven.plugins
										</groupId>
										<artifactId>
											maven-checkstyle-plugin
										</artifactId>
										<versionRange>
											[3.1.0,)
										</versionRange>
										<goals>
											<goal>check</goal>
										</goals>
									</pluginExecutionFilter>
									<action>
										<ignore></ignore>
									</action>
								</pluginExecution>
							</pluginExecutions>
						</lifecycleMappingMetadata>
					</configuration>
				</plugin>
			</plugins>
		</pluginManagement>
	</build>
	<profiles>
		<profile>
			<id>native</id>
			<activation>
				<property>
					<name>native</name>
				</property>
			</activation>
			<build>
				<plugins>
					<plugin>
						<groupId>io.quarkus</groupId>
						<artifactId>quarkus-maven-plugin</artifactId>
						<version>${quarkus.version}</version>
						<executions>
							<execution>
								<goals>
									<goal>native-image</goal>
								</goals>
								<configuration>
									<enableHttpUrlHandler>true</enableHttpUrlHandler>
								</configuration>
							</execution>
						</executions>
					</plugin>
					<plugin>
						<artifactId>maven-failsafe-plugin</artifactId>
						<version>${surefire-plugin.version}</version>
						<executions>
							<execution>
								<goals>
									<goal>integration-test</goal>
									<goal>verify</goal>
								</goals>
								<configuration>
									<systemProperties>
										<native.image.path>${project.build.directory}/${project.build.finalName}-runner</native.image.path>
									</systemProperties>
								</configuration>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>
		<!-- Profile utilizado para o desenvolvimento de novas features (tag @desenv) -->
		<profile>
			<id>develop-features</id>
			<activation>
				<property>
					<name>develop-features</name>
				</property>
			</activation>
			<properties>
				<skipTests>true</skipTests>
				<skipReports>true</skipReports>
			</properties>
			<build>
				<plugins>
					<plugin>
						<groupId>io.quarkus</groupId>
						<artifactId>quarkus-maven-plugin</artifactId>
						<version>${quarkus.version}</version>
						<configuration>
							<skip>true</skip>
						</configuration>
					</plugin>
					<plugin>
						<groupId>org.jacoco</groupId>
						<artifactId>jacoco-maven-plugin</artifactId>
						<version>${jacoco.version}</version>
						<configuration>
							<skip>true</skip>
						</configuration>
					</plugin>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-checkstyle-plugin</artifactId>
						<version>3.1.0</version>
						<configuration>
							<skip>true</skip>
						</configuration>
					</plugin>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-failsafe-plugin</artifactId>
						<version>${maven-failsafe-plugin.version}</version>
						<executions>
							<execution>
								<goals>
									<goal>integration-test</goal>
								</goals>
								<configuration>
									<test>RunCucumberDevelopFeatures</test>
									<skipTests>false</skipTests>
								</configuration>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>
		<!-- Profile utlizado para gerar a imagem localmente. Bitbucket configurado 
			para realizar o build e envio da imagem para a nuvem -->
		<profile>
			<id>docker-build-local</id>
			<build>
				<plugins>
					<plugin>
						<groupId>io.fabric8</groupId>
						<artifactId>docker-maven-plugin</artifactId>
						<version>${docker-maven-plugin.version}</version>
						<configuration>
							<images>
								<image>
									<name>zion/${project.artifactId}:${project.version}</name>
									<build>
										<contextDir>${project.basedir}</contextDir>
										<dockerFile>${project.basedir}/src/main/docker/Dockerfile.jvm</dockerFile>
										<tags>
											<tag>latest</tag>
										</tags>
									</build>
								</image>
							</images>
						</configuration>
						<executions>
							<execution>
								<id>docker-build</id>
								<goals>
									<goal>build</goal>
								</goals>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>
		<profile>
			<id>docker-postgres-test</id>
			<activation>
				<activeByDefault>true</activeByDefault>
				<property>
					<name>develop-features</name>
				</property>
			</activation>
			<build>
				<plugins>
					<plugin>
						<groupId>io.fabric8</groupId>
						<artifactId>docker-maven-plugin</artifactId>
						<version>${docker-maven-plugin.version}</version>
						<configuration>
							<images>
								<image>
									<name>postgres:11.5-alpine</name>
									<alias>postgresql</alias>
									<run>
										<env>
											<POSTGRES_USER>${test-postgresql-user}</POSTGRES_USER>
											<POSTGRES_PASSWORD>${test-postgresql-passwd}</POSTGRES_PASSWORD>
											<POSTGRES_DB>${test-postgresql-db}</POSTGRES_DB>
										</env>
										<ports>
											<port>${test-postgresql-port}:5432</port>
										</ports>
										<wait>
											<tcp>
												<mode>mapped</mode>
												<ports>
													<port>5432</port>
												</ports>
											</tcp>
											<time>10000</time>
										</wait>
									</run>
								</image>
							</images>
							<!--Stops all postgres:10.5 images currently running, not just those 
								we just started. Useful to stop processes still running from a previously 
								failed integration test run -->
							<allContainers>true</allContainers>
						</configuration>
						<executions>
							<execution>
								<id>docker-start</id>
								<phase>pre-integration-test</phase>
								<goals>
									<goal>stop</goal>
									<goal>start</goal>
								</goals>
							</execution>
							<execution>
								<id>docker-stop</id>
								<phase>post-integration-test</phase>
								<goals>
									<goal>stop</goal>
								</goals>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>
		<profile>
			<id>embedded-postgres-test</id>
			<build>
				<plugins>
					<plugin>
						<groupId>com.github.slavaz</groupId>
						<artifactId>embedded-postgresql-maven-plugin</artifactId>
						<version>${embedded-postgresql-maven-plugin.version}</version>
						<configuration>
							<pgServerVersion>latest</pgServerVersion>
							<pgServerPort>${test-postgresql-port}</pgServerPort>
							<dbName>${test-postgresql-db}</dbName>
							<userName>${test-postgresql-user}</userName>
							<password>${test-postgresql-passwd}</password>
						</configuration>
						<executions>
							<execution>
								<id>start-pgsql</id>
								<phase>pre-integration-test</phase>
								<goals>
									<goal>start</goal>
								</goals>
							</execution>
							<execution>
								<id>stop-pgsql</id>
								<phase>post-integration-test</phase>
								<goals>
									<goal>stop</goal>
								</goals>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>
	</profiles>
</project>
